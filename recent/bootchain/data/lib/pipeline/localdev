#!/bin/bash -efu

. altboot-sh-functions
. scandev-sh-functions

check_parameter ALTBOOT_LOCALDEV

target=
devspec=
chkonce=
devices=

b_a()
{
	get_bootarg LOCALDEV $1
}

b_a method
b_a disk
b_a part
b_a uuid
b_a label
b_a directory
b_a timeout
b_a options


is_target_found()
{
	[ -n "$target" ] ||
		return 1
	enter "is_target_found"

	local rc=0 opts="${options-}"
	local image partdev mp="$destdir"

	[ -z "$ALTBOOT_STAGE2COMPAT" ] ||
		mp="${OEM_CDIMAGE_PATH:-/image}"
	run mkdir -p -- "$mp"

	if [ "$method" = "cdrom" ]; then
		opts="-t iso9660 -o ro${opts:+,$opts}"

		case "$target" in
		*[0-9])	partdev="${target}p1";;
		*)	partdev="${target}1";;
		esac

		if [ -b "$partdev" ] && run mount $opts -- "$partdev" "$mp"; then
			debug "cdrom target replaced to the first partition: $partdev"
			target="$partdev"
		else
			debug "mounting original cdrom target device: $target"
			run mount $opts -- "$target" "$mp" || rc=1
		fi

		if [ "$rc" != 0 ]; then
			message "can't mount target CD/DVD/Pendrive: $target"
			leave "is_target_found"
			return 1
		fi

		if [ -n "$ALTBOOT_STAGE2COMPAT" ]; then
			stage2_setenv DEVICE "${target##/dev/}"
			stage2_setenv METHOD "cdrom"
			stage2_setenv PREFIX "/"
			passthru_results "$mp"
		fi

		leave "is_target_found"
		return 0
	fi

	case "$target" in
	*[0-9])	partdev="${target}p1";;
	*)	partdev="${target}1";;
	esac

	if [ -b "$partdev" ] &&
		run mount -t iso9660 -o "ro${opts:+,$opts}" -- "$partdev" "$mp"
	then
		debug "disk target replaced to the first partition: $partdev"
		target="$partdev"
	else
		debug "mounting original disk target device: $target"
		run mount -o "ro${opts:+,$opts}" -- "$target" "$mp" || rc=1
	fi

	if [ "$rc" != 0 ]; then
		message "can't mount target disk partition: $target"
		leave "is_target_found"
		return 1
	fi

	message "$target has mounted successfully"

	if [ -z "$directory" ]; then
		if [ -n "$ALTBOOT_STAGE2COMPAT" ]; then
			stage2_setenv DEVICE "${target##/dev/}"
			stage2_setenv METHOD "disk"
			stage2_setenv PREFIX "/"
			passthru_results "$mp"
		fi
		leave "is_target_found"
		return 0
	fi

	if [ ! -r "${mp}${directory}" ]; then
		message "however specified ISO-image not found: '${directory:1}'"
		run umount -fl -- "$mp"
		leave "is_target_found"
		return 1
	fi

	message "assuming ISO-image, relative path: '${directory:1}'"

	image="$datadir"
	[ -z "$ALTBOOT_STAGE2COMPAT" ] ||
		image=/root
	run mkdir -p -- "$image"
	run mount --move -- "$mp" "$image"
	lomount "" "${image}${directory}" "$mp" || rc=1

	if [ "$rc" != 0 ]; then
		message "$target will be unmounted"
		run umount -fl -- "$image"
		leave "is_target_found"
		return 1
	fi

	if [ -n "$ALTBOOT_STAGE2COMPAT" ]; then
		stage2_setenv DEVICE "${target##/dev/}"
		stage2_setenv METHOD "disk"
		stage2_setenv PREFIX "$directory"
		stage2_setenv PIGGYBACK 1
		passthru_results "$mp"
	fi

	leave "is_target_found"
}

boot_device_choice()
{
	enter "boot_device_choice"
	device_choice
	debug "TARGET: '$target'"

	local rc=0

	if [ "$method" = "cdrom" ]; then
		is_target_found || rc=$?
		leave "boot_device_choice"
		return $rc
	fi

	if [ -z "$target" ]; then
		leave "boot_device_choice"
		return 1
	fi

	local title="[ Optional fields ]"

	local text="Please enter the full path to an ISO-image"
	text="$text containing the $OEM_DISTRIBUTION or leave"
	text="$text this field blank to use mounted partition"
	text="$text 'as is'."

	while :; do
		IM_form "$title" "$text" 3 \
			directory 128 "ISO-image"	\
			options    64 "Mount options"	\
			||:
		if [ -n "${directory//[^[:space:]]/}" ] ||
			[ -n "$directory" -a "${directory:0:1}" != "/" ]
		then
			IM_errmsg "Invalid path: '$directory'!"
			continue
		elif is_target_found; then
			break
		elif [ -n "$directory" ]; then
			IM_errmsg "Can't mount ISO-image: '$directory'!"
			rc=1
			break
		else
			IM_errmsg "Can't mount boot device: $target!"
			rc=1
			break
		fi
	done

	leave "boot_device_choice"
	return $rc
}

start_scan()
{
	IM_ponder_start "[ Scanning devices... ]"
}


# Entry point
IM_on

timeout="${timeout:-20}"
label="${label//\\040/ }"
[ -z "${disk}${part}${uuid}${label}" ] ||
	devspec=1
debug "$PROG started ($(get_parameter ALTBOOT_LOCALDEV))"
start_scan
nsec=0
i=0

while :; do
	debug "Idle before scan devices"

	sleep 1
	scan_devices
	i=$((1 + $i))

	if is_target_found; then
		IM_ponder_stop
		break
	fi

	if [ -z "${NOASK}${devspec}${chkonce}" ]; then
		IM_ponder_stop
		boot_device_choice && break ||:
		start_scan
		chkonce=1
	elif [ "$i" = 5 ]; then
		IM_ponder_stop
		nsec=$(( $nsec + $i ))

		[ -n "$NOASK" ] ||
			boot_device_choice && break ||:

		if [ "$nsec" -ge "$timeout" ]; then
			if [ -z "$NOASK" ]; then
				IM_errmsg "Boot device not defined, try again!"
			elif [ -z "$devspec" ]; then
				IM_die "device not specified, dialogs are disabled"
			else
				IM_die "specified device not found, dialogs are disabled"
			fi
		fi

		debug "boot device not ready, go to the next ring"
		start_scan
		i=0
	fi
done

debug "$PROG finished"

IM_off
